'use strict';var cov_tp5ppl4oe=function(){var path='internal/crypto/util.js',hash='e76ac947e2915a3f61eb3098c2fe965d0ee64a23',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'internal/crypto/util.js',statementMap:{'0':{start:{line:8,column:4},end:{line:8,column:29}},'1':{start:{line:12,column:4},end:{line:12,column:39}},'2':{start:{line:14,column:15},end:{line:14,column:41}},'3':{start:{line:15,column:19},end:{line:15,column:36}},'4':{start:{line:19,column:4},end:{line:19,column:28}},'5':{start:{line:21,column:22},end:{line:21,column:30}},'6':{start:{line:24,column:2},end:{line:24,column:24}},'7':{start:{line:28,column:2},end:{line:28,column:25}},'8':{start:{line:35,column:2},end:{line:39,column:3}},'9':{start:{line:36,column:4},end:{line:37,column:24}},'10':{start:{line:37,column:6},end:{line:37,column:24}},'11':{start:{line:38,column:4},end:{line:38,column:38}},'12':{start:{line:40,column:2},end:{line:40,column:13}},'13':{start:{line:43,column:19},end:{line:43,column:76}},'14':{start:{line:43,column:38},end:{line:43,column:75}},'15':{start:{line:44,column:18},end:{line:44,column:74}},'16':{start:{line:44,column:37},end:{line:44,column:73}},'17':{start:{line:45,column:18},end:{line:45,column:74}},'18':{start:{line:45,column:37},end:{line:45,column:73}},'19':{start:{line:48,column:2},end:{line:49,column:71}},'20':{start:{line:49,column:4},end:{line:49,column:71}},'21':{start:{line:51,column:2},end:{line:52,column:74}},'22':{start:{line:52,column:4},end:{line:52,column:74}},'23':{start:{line:53,column:2},end:{line:53,column:22}},'24':{start:{line:56,column:2},end:{line:57,column:30}},'25':{start:{line:57,column:4},end:{line:57,column:30}},'26':{start:{line:59,column:2},end:{line:59,column:31}},'27':{start:{line:62,column:0},end:{line:70,column:2}}},fnMap:{'0':{name:'setDefaultEncoding',decl:{start:{line:23,column:9},end:{line:23,column:27}},loc:{start:{line:23,column:33},end:{line:25,column:1}},line:23},'1':{name:'getDefaultEncoding',decl:{start:{line:27,column:9},end:{line:27,column:27}},loc:{start:{line:27,column:30},end:{line:29,column:1}},line:27},'2':{name:'toBuf',decl:{start:{line:34,column:9},end:{line:34,column:14}},loc:{start:{line:34,column:30},end:{line:41,column:1}},line:34},'3':{name:'(anonymous_3)',decl:{start:{line:43,column:32},end:{line:43,column:33}},loc:{start:{line:43,column:38},end:{line:43,column:75}},line:43},'4':{name:'(anonymous_4)',decl:{start:{line:44,column:31},end:{line:44,column:32}},loc:{start:{line:44,column:37},end:{line:44,column:73}},line:44},'5':{name:'(anonymous_5)',decl:{start:{line:45,column:31},end:{line:45,column:32}},loc:{start:{line:45,column:37},end:{line:45,column:73}},line:45},'6':{name:'setEngine',decl:{start:{line:47,column:9},end:{line:47,column:18}},loc:{start:{line:47,column:30},end:{line:60,column:1}},line:47}},branchMap:{'0':{loc:{start:{line:35,column:2},end:{line:39,column:3}},type:'if',locations:[{start:{line:35,column:2},end:{line:39,column:3}},{start:{line:35,column:2},end:{line:39,column:3}}],line:35},'1':{loc:{start:{line:36,column:4},end:{line:37,column:24}},type:'if',locations:[{start:{line:36,column:4},end:{line:37,column:24}},{start:{line:36,column:4},end:{line:37,column:24}}],line:36},'2':{loc:{start:{line:36,column:8},end:{line:36,column:42}},type:'binary-expr',locations:[{start:{line:36,column:8},end:{line:36,column:29}},{start:{line:36,column:33},end:{line:36,column:42}}],line:36},'3':{loc:{start:{line:48,column:2},end:{line:49,column:71}},type:'if',locations:[{start:{line:48,column:2},end:{line:49,column:71}},{start:{line:48,column:2},end:{line:49,column:71}}],line:48},'4':{loc:{start:{line:51,column:2},end:{line:52,column:74}},type:'if',locations:[{start:{line:51,column:2},end:{line:52,column:74}},{start:{line:51,column:2},end:{line:52,column:74}}],line:51},'5':{loc:{start:{line:51,column:6},end:{line:51,column:40}},type:'binary-expr',locations:[{start:{line:51,column:6},end:{line:51,column:11}},{start:{line:51,column:15},end:{line:51,column:40}}],line:51},'6':{loc:{start:{line:56,column:2},end:{line:57,column:30}},type:'if',locations:[{start:{line:56,column:2},end:{line:57,column:30}},{start:{line:56,column:2},end:{line:57,column:30}}],line:56}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0,'27':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0},b:{'0':[0,0],'1':[0,0],'2':[0,0],'3':[0,0],'4':[0,0],'5':[0,0],'6':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const{getCiphers:_getCiphers,getCurves:_getCurves,getHashes:_getHashes,setEngine:_setEngine}=(cov_tp5ppl4oe.s[0]++,process.binding('crypto'));const{ENGINE_METHOD_ALL}=(cov_tp5ppl4oe.s[1]++,process.binding('constants').crypto);const errors=(cov_tp5ppl4oe.s[2]++,require('internal/errors'));const{Buffer}=(cov_tp5ppl4oe.s[3]++,require('buffer'));const{cachedResult,filterDuplicateStrings}=(cov_tp5ppl4oe.s[4]++,require('internal/util'));var defaultEncoding=(cov_tp5ppl4oe.s[5]++,'buffer');function setDefaultEncoding(val){cov_tp5ppl4oe.f[0]++;cov_tp5ppl4oe.s[6]++;defaultEncoding=val;}function getDefaultEncoding(){cov_tp5ppl4oe.f[1]++;cov_tp5ppl4oe.s[7]++;return defaultEncoding;}// This is here because many functions accepted binary strings without
// any explicit encoding in older versions of node, and we don't want
// to break them unnecessarily.
function toBuf(str,encoding){cov_tp5ppl4oe.f[2]++;cov_tp5ppl4oe.s[8]++;if(typeof str==='string'){cov_tp5ppl4oe.b[0][0]++;cov_tp5ppl4oe.s[9]++;if((cov_tp5ppl4oe.b[2][0]++,encoding==='buffer')||(cov_tp5ppl4oe.b[2][1]++,!encoding)){cov_tp5ppl4oe.b[1][0]++;cov_tp5ppl4oe.s[10]++;encoding='utf8';}else{cov_tp5ppl4oe.b[1][1]++;}cov_tp5ppl4oe.s[11]++;return Buffer.from(str,encoding);}else{cov_tp5ppl4oe.b[0][1]++;}cov_tp5ppl4oe.s[12]++;return str;}const getCiphers=(cov_tp5ppl4oe.s[13]++,cachedResult(()=>{cov_tp5ppl4oe.f[3]++;cov_tp5ppl4oe.s[14]++;return filterDuplicateStrings(_getCiphers());}));const getHashes=(cov_tp5ppl4oe.s[15]++,cachedResult(()=>{cov_tp5ppl4oe.f[4]++;cov_tp5ppl4oe.s[16]++;return filterDuplicateStrings(_getHashes());}));const getCurves=(cov_tp5ppl4oe.s[17]++,cachedResult(()=>{cov_tp5ppl4oe.f[5]++;cov_tp5ppl4oe.s[18]++;return filterDuplicateStrings(_getCurves());}));function setEngine(id,flags){cov_tp5ppl4oe.f[6]++;cov_tp5ppl4oe.s[19]++;if(typeof id!=='string'){cov_tp5ppl4oe.b[3][0]++;cov_tp5ppl4oe.s[20]++;throw new errors.TypeError('ERR_INVALID_ARG_TYPE','id','string');}else{cov_tp5ppl4oe.b[3][1]++;}cov_tp5ppl4oe.s[21]++;if((cov_tp5ppl4oe.b[5][0]++,flags)&&(cov_tp5ppl4oe.b[5][1]++,typeof flags!=='number')){cov_tp5ppl4oe.b[4][0]++;cov_tp5ppl4oe.s[22]++;throw new errors.TypeError('ERR_INVALID_ARG_TYPE','flags','number');}else{cov_tp5ppl4oe.b[4][1]++;}cov_tp5ppl4oe.s[23]++;flags=flags>>>0;// Use provided engine for everything by default
cov_tp5ppl4oe.s[24]++;if(flags===0){cov_tp5ppl4oe.b[6][0]++;cov_tp5ppl4oe.s[25]++;flags=ENGINE_METHOD_ALL;}else{cov_tp5ppl4oe.b[6][1]++;}cov_tp5ppl4oe.s[26]++;return _setEngine(id,flags);}cov_tp5ppl4oe.s[27]++;module.exports={getCiphers,getCurves,getDefaultEncoding,getHashes,setDefaultEncoding,setEngine,toBuf};