'use strict';/** Highest positive signed 32-bit float value */var cov_2lb1jwotzl=function(){var path='punycode.js',hash='bfa99aecfa6c6845929acb8ed8f4dd7cdc5f64f1',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'punycode.js',statementMap:{'0':{start:{line:4,column:15},end:{line:4,column:25}},'1':{start:{line:7,column:13},end:{line:7,column:15}},'2':{start:{line:8,column:13},end:{line:8,column:14}},'3':{start:{line:9,column:13},end:{line:9,column:15}},'4':{start:{line:10,column:13},end:{line:10,column:15}},'5':{start:{line:11,column:13},end:{line:11,column:16}},'6':{start:{line:12,column:20},end:{line:12,column:22}},'7':{start:{line:13,column:17},end:{line:13,column:20}},'8':{start:{line:14,column:18},end:{line:14,column:21}},'9':{start:{line:17,column:22},end:{line:17,column:29}},'10':{start:{line:18,column:22},end:{line:18,column:36}},'11':{start:{line:19,column:24},end:{line:19,column:51}},'12':{start:{line:22,column:15},end:{line:26,column:1}},'13':{start:{line:29,column:22},end:{line:29,column:33}},'14':{start:{line:30,column:14},end:{line:30,column:24}},'15':{start:{line:31,column:27},end:{line:31,column:46}},'16':{start:{line:42,column:1},end:{line:42,column:36}},'17':{start:{line:54,column:16},end:{line:54,column:18}},'18':{start:{line:55,column:14},end:{line:55,column:26}},'19':{start:{line:56,column:1},end:{line:58,column:2}},'20':{start:{line:57,column:2},end:{line:57,column:37}},'21':{start:{line:59,column:1},end:{line:59,column:15}},'22':{start:{line:73,column:15},end:{line:73,column:32}},'23':{start:{line:74,column:14},end:{line:74,column:16}},'24':{start:{line:75,column:1},end:{line:80,column:2}},'25':{start:{line:78,column:2},end:{line:78,column:26}},'26':{start:{line:79,column:2},end:{line:79,column:20}},'27':{start:{line:82,column:1},end:{line:82,column:50}},'28':{start:{line:83,column:16},end:{line:83,column:33}},'29':{start:{line:84,column:17},end:{line:84,column:42}},'30':{start:{line:85,column:1},end:{line:85,column:25}},'31':{start:{line:102,column:16},end:{line:102,column:18}},'32':{start:{line:103,column:15},end:{line:103,column:16}},'33':{start:{line:104,column:16},end:{line:104,column:29}},'34':{start:{line:105,column:1},end:{line:121,column:2}},'35':{start:{line:106,column:16},end:{line:106,column:44}},'36':{start:{line:107,column:2},end:{line:120,column:3}},'37':{start:{line:109,column:17},end:{line:109,column:45}},'38':{start:{line:110,column:3},end:{line:117,column:4}},'39':{start:{line:111,column:4},end:{line:111,column:69}},'40':{start:{line:115,column:4},end:{line:115,column:23}},'41':{start:{line:116,column:4},end:{line:116,column:14}},'42':{start:{line:119,column:3},end:{line:119,column:22}},'43':{start:{line:122,column:1},end:{line:122,column:15}},'44':{start:{line:133,column:19},end:{line:133,column:58}},'45':{start:{line:133,column:28},end:{line:133,column:58}},'46':{start:{line:144,column:21},end:{line:155,column:1}},'47':{start:{line:145,column:1},end:{line:147,column:2}},'48':{start:{line:146,column:2},end:{line:146,column:26}},'49':{start:{line:148,column:1},end:{line:150,column:2}},'50':{start:{line:149,column:2},end:{line:149,column:26}},'51':{start:{line:151,column:1},end:{line:153,column:2}},'52':{start:{line:152,column:2},end:{line:152,column:26}},'53':{start:{line:154,column:1},end:{line:154,column:13}},'54':{start:{line:168,column:21},end:{line:172,column:1}},'55':{start:{line:171,column:1},end:{line:171,column:60}},'56':{start:{line:179,column:14},end:{line:187,column:1}},'57':{start:{line:180,column:9},end:{line:180,column:10}},'58':{start:{line:181,column:1},end:{line:181,column:54}},'59':{start:{line:182,column:1},end:{line:182,column:35}},'60':{start:{line:183,column:1},end:{line:185,column:2}},'61':{start:{line:184,column:2},end:{line:184,column:39}},'62':{start:{line:186,column:1},end:{line:186,column:64}},'63':{start:{line:196,column:15},end:{line:278,column:1}},'64':{start:{line:198,column:16},end:{line:198,column:18}},'65':{start:{line:199,column:21},end:{line:199,column:33}},'66':{start:{line:200,column:9},end:{line:200,column:10}},'67':{start:{line:201,column:9},end:{line:201,column:17}},'68':{start:{line:202,column:12},end:{line:202,column:23}},'69':{start:{line:208,column:13},end:{line:208,column:41}},'70':{start:{line:209,column:1},end:{line:211,column:2}},'71':{start:{line:210,column:2},end:{line:210,column:12}},'72':{start:{line:213,column:1},end:{line:219,column:2}},'73':{start:{line:215,column:2},end:{line:217,column:3}},'74':{start:{line:216,column:3},end:{line:216,column:22}},'75':{start:{line:218,column:2},end:{line:218,column:35}},'76':{start:{line:224,column:1},end:{line:275,column:2}},'77':{start:{line:231,column:13},end:{line:231,column:14}},'78':{start:{line:232,column:2},end:{line:258,column:3}},'79':{start:{line:234,column:3},end:{line:236,column:4}},'80':{start:{line:235,column:4},end:{line:235,column:27}},'81':{start:{line:238,column:17},end:{line:238,column:56}},'82':{start:{line:240,column:3},end:{line:242,column:4}},'83':{start:{line:241,column:4},end:{line:241,column:22}},'84':{start:{line:244,column:3},end:{line:244,column:18}},'85':{start:{line:245,column:13},end:{line:245,column:68}},'86':{start:{line:247,column:3},end:{line:249,column:4}},'87':{start:{line:248,column:4},end:{line:248,column:10}},'88':{start:{line:251,column:22},end:{line:251,column:30}},'89':{start:{line:252,column:3},end:{line:254,column:4}},'90':{start:{line:253,column:4},end:{line:253,column:22}},'91':{start:{line:256,column:3},end:{line:256,column:19}},'92':{start:{line:260,column:14},end:{line:260,column:31}},'93':{start:{line:261,column:2},end:{line:261,column:41}},'94':{start:{line:265,column:2},end:{line:267,column:3}},'95':{start:{line:266,column:3},end:{line:266,column:21}},'96':{start:{line:269,column:2},end:{line:269,column:22}},'97':{start:{line:270,column:2},end:{line:270,column:11}},'98':{start:{line:273,column:2},end:{line:273,column:27}},'99':{start:{line:277,column:1},end:{line:277,column:40}},'100':{start:{line:287,column:15},end:{line:373,column:1}},'101':{start:{line:288,column:16},end:{line:288,column:18}},'102':{start:{line:291,column:1},end:{line:291,column:27}},'103':{start:{line:294,column:19},end:{line:294,column:31}},'104':{start:{line:297,column:9},end:{line:297,column:17}},'105':{start:{line:298,column:13},end:{line:298,column:14}},'106':{start:{line:299,column:12},end:{line:299,column:23}},'107':{start:{line:302,column:1},end:{line:306,column:2}},'108':{start:{line:303,column:2},end:{line:305,column:3}},'109':{start:{line:304,column:3},end:{line:304,column:49}},'110':{start:{line:308,column:19},end:{line:308,column:32}},'111':{start:{line:309,column:22},end:{line:309,column:33}},'112':{start:{line:315,column:1},end:{line:317,column:2}},'113':{start:{line:316,column:2},end:{line:316,column:25}},'114':{start:{line:320,column:1},end:{line:371,column:2}},'115':{start:{line:324,column:10},end:{line:324,column:16}},'116':{start:{line:325,column:2},end:{line:329,column:3}},'117':{start:{line:326,column:3},end:{line:328,column:4}},'118':{start:{line:327,column:4},end:{line:327,column:21}},'119':{start:{line:333,column:32},end:{line:333,column:50}},'120':{start:{line:334,column:2},end:{line:336,column:3}},'121':{start:{line:335,column:3},end:{line:335,column:21}},'122':{start:{line:338,column:2},end:{line:338,column:43}},'123':{start:{line:339,column:2},end:{line:339,column:8}},'124':{start:{line:341,column:2},end:{line:366,column:3}},'125':{start:{line:342,column:3},end:{line:344,column:4}},'126':{start:{line:343,column:4},end:{line:343,column:22}},'127':{start:{line:345,column:3},end:{line:365,column:4}},'128':{start:{line:347,column:12},end:{line:347,column:17}},'129':{start:{line:348,column:4},end:{line:359,column:5}},'130':{start:{line:349,column:15},end:{line:349,column:70}},'131':{start:{line:350,column:5},end:{line:352,column:6}},'132':{start:{line:351,column:6},end:{line:351,column:12}},'133':{start:{line:353,column:21},end:{line:353,column:26}},'134':{start:{line:354,column:24},end:{line:354,column:32}},'135':{start:{line:355,column:5},end:{line:357,column:7}},'136':{start:{line:358,column:5},end:{line:358,column:37}},'137':{start:{line:361,column:4},end:{line:361,column:56}},'138':{start:{line:362,column:4},end:{line:362,column:78}},'139':{start:{line:363,column:4},end:{line:363,column:14}},'140':{start:{line:364,column:4},end:{line:364,column:21}},'141':{start:{line:368,column:2},end:{line:368,column:10}},'142':{start:{line:369,column:2},end:{line:369,column:6}},'143':{start:{line:372,column:1},end:{line:372,column:24}},'144':{start:{line:386,column:18},end:{line:392,column:1}},'145':{start:{line:387,column:1},end:{line:391,column:4}},'146':{start:{line:388,column:2},end:{line:390,column:12}},'147':{start:{line:405,column:16},end:{line:411,column:1}},'148':{start:{line:406,column:1},end:{line:410,column:4}},'149':{start:{line:407,column:2},end:{line:409,column:12}},'150':{start:{line:416,column:17},end:{line:438,column:1}},'151':{start:{line:440,column:0},end:{line:440,column:26}}},fnMap:{'0':{name:'error',decl:{start:{line:41,column:9},end:{line:41,column:14}},loc:{start:{line:41,column:21},end:{line:43,column:1}},line:41},'1':{name:'map',decl:{start:{line:53,column:9},end:{line:53,column:12}},loc:{start:{line:53,column:24},end:{line:60,column:1}},line:53},'2':{name:'mapDomain',decl:{start:{line:72,column:9},end:{line:72,column:18}},loc:{start:{line:72,column:31},end:{line:86,column:1}},line:72},'3':{name:'ucs2decode',decl:{start:{line:101,column:9},end:{line:101,column:19}},loc:{start:{line:101,column:28},end:{line:123,column:1}},line:101},'4':{name:'(anonymous_4)',decl:{start:{line:133,column:19},end:{line:133,column:20}},loc:{start:{line:133,column:28},end:{line:133,column:58}},line:133},'5':{name:'(anonymous_5)',decl:{start:{line:144,column:21},end:{line:144,column:22}},loc:{start:{line:144,column:41},end:{line:155,column:1}},line:144},'6':{name:'(anonymous_6)',decl:{start:{line:168,column:21},end:{line:168,column:22}},loc:{start:{line:168,column:43},end:{line:172,column:1}},line:168},'7':{name:'(anonymous_7)',decl:{start:{line:179,column:14},end:{line:179,column:15}},loc:{start:{line:179,column:52},end:{line:187,column:1}},line:179},'8':{name:'(anonymous_8)',decl:{start:{line:196,column:15},end:{line:196,column:16}},loc:{start:{line:196,column:31},end:{line:278,column:1}},line:196},'9':{name:'(anonymous_9)',decl:{start:{line:287,column:15},end:{line:287,column:16}},loc:{start:{line:287,column:31},end:{line:373,column:1}},line:287},'10':{name:'(anonymous_10)',decl:{start:{line:386,column:18},end:{line:386,column:19}},loc:{start:{line:386,column:34},end:{line:392,column:1}},line:386},'11':{name:'(anonymous_11)',decl:{start:{line:387,column:25},end:{line:387,column:26}},loc:{start:{line:387,column:42},end:{line:391,column:2}},line:387},'12':{name:'(anonymous_12)',decl:{start:{line:405,column:16},end:{line:405,column:17}},loc:{start:{line:405,column:32},end:{line:411,column:1}},line:405},'13':{name:'(anonymous_13)',decl:{start:{line:406,column:25},end:{line:406,column:26}},loc:{start:{line:406,column:42},end:{line:410,column:2}},line:406}},branchMap:{'0':{loc:{start:{line:75,column:1},end:{line:80,column:2}},type:'if',locations:[{start:{line:75,column:1},end:{line:80,column:2}},{start:{line:75,column:1},end:{line:80,column:2}}],line:75},'1':{loc:{start:{line:107,column:2},end:{line:120,column:3}},type:'if',locations:[{start:{line:107,column:2},end:{line:120,column:3}},{start:{line:107,column:2},end:{line:120,column:3}}],line:107},'2':{loc:{start:{line:107,column:6},end:{line:107,column:60}},type:'binary-expr',locations:[{start:{line:107,column:6},end:{line:107,column:21}},{start:{line:107,column:25},end:{line:107,column:40}},{start:{line:107,column:44},end:{line:107,column:60}}],line:107},'3':{loc:{start:{line:110,column:3},end:{line:117,column:4}},type:'if',locations:[{start:{line:110,column:3},end:{line:117,column:4}},{start:{line:110,column:3},end:{line:117,column:4}}],line:110},'4':{loc:{start:{line:145,column:1},end:{line:147,column:2}},type:'if',locations:[{start:{line:145,column:1},end:{line:147,column:2}},{start:{line:145,column:1},end:{line:147,column:2}}],line:145},'5':{loc:{start:{line:148,column:1},end:{line:150,column:2}},type:'if',locations:[{start:{line:148,column:1},end:{line:150,column:2}},{start:{line:148,column:1},end:{line:150,column:2}}],line:148},'6':{loc:{start:{line:151,column:1},end:{line:153,column:2}},type:'if',locations:[{start:{line:151,column:1},end:{line:153,column:2}},{start:{line:151,column:1},end:{line:153,column:2}}],line:151},'7':{loc:{start:{line:181,column:9},end:{line:181,column:53}},type:'cond-expr',locations:[{start:{line:181,column:21},end:{line:181,column:40}},{start:{line:181,column:43},end:{line:181,column:53}}],line:181},'8':{loc:{start:{line:209,column:1},end:{line:211,column:2}},type:'if',locations:[{start:{line:209,column:1},end:{line:211,column:2}},{start:{line:209,column:1},end:{line:211,column:2}}],line:209},'9':{loc:{start:{line:215,column:2},end:{line:217,column:3}},type:'if',locations:[{start:{line:215,column:2},end:{line:217,column:3}},{start:{line:215,column:2},end:{line:217,column:3}}],line:215},'10':{loc:{start:{line:234,column:3},end:{line:236,column:4}},type:'if',locations:[{start:{line:234,column:3},end:{line:236,column:4}},{start:{line:234,column:3},end:{line:236,column:4}}],line:234},'11':{loc:{start:{line:240,column:3},end:{line:242,column:4}},type:'if',locations:[{start:{line:240,column:3},end:{line:242,column:4}},{start:{line:240,column:3},end:{line:242,column:4}}],line:240},'12':{loc:{start:{line:240,column:7},end:{line:240,column:55}},type:'binary-expr',locations:[{start:{line:240,column:7},end:{line:240,column:20}},{start:{line:240,column:24},end:{line:240,column:55}}],line:240},'13':{loc:{start:{line:245,column:13},end:{line:245,column:68}},type:'cond-expr',locations:[{start:{line:245,column:25},end:{line:245,column:29}},{start:{line:245,column:33},end:{line:245,column:67}}],line:245},'14':{loc:{start:{line:245,column:33},end:{line:245,column:67}},type:'cond-expr',locations:[{start:{line:245,column:52},end:{line:245,column:56}},{start:{line:245,column:59},end:{line:245,column:67}}],line:245},'15':{loc:{start:{line:247,column:3},end:{line:249,column:4}},type:'if',locations:[{start:{line:247,column:3},end:{line:249,column:4}},{start:{line:247,column:3},end:{line:249,column:4}}],line:247},'16':{loc:{start:{line:252,column:3},end:{line:254,column:4}},type:'if',locations:[{start:{line:252,column:3},end:{line:254,column:4}},{start:{line:252,column:3},end:{line:254,column:4}}],line:252},'17':{loc:{start:{line:265,column:2},end:{line:267,column:3}},type:'if',locations:[{start:{line:265,column:2},end:{line:267,column:3}},{start:{line:265,column:2},end:{line:267,column:3}}],line:265},'18':{loc:{start:{line:303,column:2},end:{line:305,column:3}},type:'if',locations:[{start:{line:303,column:2},end:{line:305,column:3}},{start:{line:303,column:2},end:{line:305,column:3}}],line:303},'19':{loc:{start:{line:315,column:1},end:{line:317,column:2}},type:'if',locations:[{start:{line:315,column:1},end:{line:317,column:2}},{start:{line:315,column:1},end:{line:317,column:2}}],line:315},'20':{loc:{start:{line:326,column:3},end:{line:328,column:4}},type:'if',locations:[{start:{line:326,column:3},end:{line:328,column:4}},{start:{line:326,column:3},end:{line:328,column:4}}],line:326},'21':{loc:{start:{line:326,column:7},end:{line:326,column:44}},type:'binary-expr',locations:[{start:{line:326,column:7},end:{line:326,column:24}},{start:{line:326,column:28},end:{line:326,column:44}}],line:326},'22':{loc:{start:{line:334,column:2},end:{line:336,column:3}},type:'if',locations:[{start:{line:334,column:2},end:{line:336,column:3}},{start:{line:334,column:2},end:{line:336,column:3}}],line:334},'23':{loc:{start:{line:342,column:3},end:{line:344,column:4}},type:'if',locations:[{start:{line:342,column:3},end:{line:344,column:4}},{start:{line:342,column:3},end:{line:344,column:4}}],line:342},'24':{loc:{start:{line:342,column:7},end:{line:342,column:43}},type:'binary-expr',locations:[{start:{line:342,column:7},end:{line:342,column:23}},{start:{line:342,column:27},end:{line:342,column:43}}],line:342},'25':{loc:{start:{line:345,column:3},end:{line:365,column:4}},type:'if',locations:[{start:{line:345,column:3},end:{line:365,column:4}},{start:{line:345,column:3},end:{line:365,column:4}}],line:345},'26':{loc:{start:{line:349,column:15},end:{line:349,column:70}},type:'cond-expr',locations:[{start:{line:349,column:27},end:{line:349,column:31}},{start:{line:349,column:35},end:{line:349,column:69}}],line:349},'27':{loc:{start:{line:349,column:35},end:{line:349,column:69}},type:'cond-expr',locations:[{start:{line:349,column:54},end:{line:349,column:58}},{start:{line:349,column:61},end:{line:349,column:69}}],line:349},'28':{loc:{start:{line:350,column:5},end:{line:352,column:6}},type:'if',locations:[{start:{line:350,column:5},end:{line:352,column:6}},{start:{line:350,column:5},end:{line:352,column:6}}],line:350},'29':{loc:{start:{line:388,column:9},end:{line:390,column:11}},type:'cond-expr',locations:[{start:{line:389,column:5},end:{line:389,column:42}},{start:{line:390,column:5},end:{line:390,column:11}}],line:388},'30':{loc:{start:{line:407,column:9},end:{line:409,column:11}},type:'cond-expr',locations:[{start:{line:408,column:5},end:{line:408,column:28}},{start:{line:409,column:5},end:{line:409,column:11}}],line:407}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0,'27':0,'28':0,'29':0,'30':0,'31':0,'32':0,'33':0,'34':0,'35':0,'36':0,'37':0,'38':0,'39':0,'40':0,'41':0,'42':0,'43':0,'44':0,'45':0,'46':0,'47':0,'48':0,'49':0,'50':0,'51':0,'52':0,'53':0,'54':0,'55':0,'56':0,'57':0,'58':0,'59':0,'60':0,'61':0,'62':0,'63':0,'64':0,'65':0,'66':0,'67':0,'68':0,'69':0,'70':0,'71':0,'72':0,'73':0,'74':0,'75':0,'76':0,'77':0,'78':0,'79':0,'80':0,'81':0,'82':0,'83':0,'84':0,'85':0,'86':0,'87':0,'88':0,'89':0,'90':0,'91':0,'92':0,'93':0,'94':0,'95':0,'96':0,'97':0,'98':0,'99':0,'100':0,'101':0,'102':0,'103':0,'104':0,'105':0,'106':0,'107':0,'108':0,'109':0,'110':0,'111':0,'112':0,'113':0,'114':0,'115':0,'116':0,'117':0,'118':0,'119':0,'120':0,'121':0,'122':0,'123':0,'124':0,'125':0,'126':0,'127':0,'128':0,'129':0,'130':0,'131':0,'132':0,'133':0,'134':0,'135':0,'136':0,'137':0,'138':0,'139':0,'140':0,'141':0,'142':0,'143':0,'144':0,'145':0,'146':0,'147':0,'148':0,'149':0,'150':0,'151':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0},b:{'0':[0,0],'1':[0,0],'2':[0,0,0],'3':[0,0],'4':[0,0],'5':[0,0],'6':[0,0],'7':[0,0],'8':[0,0],'9':[0,0],'10':[0,0],'11':[0,0],'12':[0,0],'13':[0,0],'14':[0,0],'15':[0,0],'16':[0,0],'17':[0,0],'18':[0,0],'19':[0,0],'20':[0,0],'21':[0,0],'22':[0,0],'23':[0,0],'24':[0,0],'25':[0,0],'26':[0,0],'27':[0,0],'28':[0,0],'29':[0,0],'30':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const maxInt=(cov_2lb1jwotzl.s[0]++,2147483647);// aka. 0x7FFFFFFF or 2^31-1
/** Bootstring parameters */const base=(cov_2lb1jwotzl.s[1]++,36);const tMin=(cov_2lb1jwotzl.s[2]++,1);const tMax=(cov_2lb1jwotzl.s[3]++,26);const skew=(cov_2lb1jwotzl.s[4]++,38);const damp=(cov_2lb1jwotzl.s[5]++,700);const initialBias=(cov_2lb1jwotzl.s[6]++,72);const initialN=(cov_2lb1jwotzl.s[7]++,128);// 0x80
const delimiter=(cov_2lb1jwotzl.s[8]++,'-');// '\x2D'
/** Regular expressions */const regexPunycode=(cov_2lb1jwotzl.s[9]++,/^xn--/);const regexNonASCII=(cov_2lb1jwotzl.s[10]++,/[^\x20-\x7E]/);// unprintable ASCII chars + non-ASCII chars
const regexSeparators=(cov_2lb1jwotzl.s[11]++,/[\x2E\u3002\uFF0E\uFF61]/g);// RFC 3490 separators
/** Error messages */const errors=(cov_2lb1jwotzl.s[12]++,{'overflow':'Overflow: input needs wider integers to process','not-basic':'Illegal input >= 0x80 (not a basic code point)','invalid-input':'Invalid input'});/** Convenience shortcuts */const baseMinusTMin=(cov_2lb1jwotzl.s[13]++,base-tMin);const floor=(cov_2lb1jwotzl.s[14]++,Math.floor);const stringFromCharCode=(cov_2lb1jwotzl.s[15]++,String.fromCharCode);/*--------------------------------------------------------------------------*//**
 * A generic error utility function.
 * @private
 * @param {String} type The error type.
 * @returns {Error} Throws a `RangeError` with the applicable error message.
 */function error(type){cov_2lb1jwotzl.f[0]++;cov_2lb1jwotzl.s[16]++;throw new RangeError(errors[type]);}/**
 * A generic `Array#map` utility function.
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} callback The function that gets called for every array
 * item.
 * @returns {Array} A new array of values returned by the callback function.
 */function map(array,fn){cov_2lb1jwotzl.f[1]++;const result=(cov_2lb1jwotzl.s[17]++,[]);let length=(cov_2lb1jwotzl.s[18]++,array.length);cov_2lb1jwotzl.s[19]++;while(length--){cov_2lb1jwotzl.s[20]++;result[length]=fn(array[length]);}cov_2lb1jwotzl.s[21]++;return result;}/**
 * A simple `Array#map`-like wrapper to work with domain name strings or email
 * addresses.
 * @private
 * @param {String} domain The domain name or email address.
 * @param {Function} callback The function that gets called for every
 * character.
 * @returns {Array} A new string of characters returned by the callback
 * function.
 */function mapDomain(string,fn){cov_2lb1jwotzl.f[2]++;const parts=(cov_2lb1jwotzl.s[22]++,string.split('@'));let result=(cov_2lb1jwotzl.s[23]++,'');cov_2lb1jwotzl.s[24]++;if(parts.length>1){cov_2lb1jwotzl.b[0][0]++;cov_2lb1jwotzl.s[25]++;// In email addresses, only the domain name should be punycoded. Leave
// the local part (i.e. everything up to `@`) intact.
result=parts[0]+'@';cov_2lb1jwotzl.s[26]++;string=parts[1];}else{cov_2lb1jwotzl.b[0][1]++;}// Avoid `split(regex)` for IE8 compatibility. See #17.
cov_2lb1jwotzl.s[27]++;string=string.replace(regexSeparators,'\x2E');const labels=(cov_2lb1jwotzl.s[28]++,string.split('.'));const encoded=(cov_2lb1jwotzl.s[29]++,map(labels,fn).join('.'));cov_2lb1jwotzl.s[30]++;return result+encoded;}/**
 * Creates an array containing the numeric code points of each Unicode
 * character in the string. While JavaScript uses UCS-2 internally,
 * this function will convert a pair of surrogate halves (each of which
 * UCS-2 exposes as separate characters) into a single code point,
 * matching UTF-16.
 * @see `punycode.ucs2.encode`
 * @see <https://mathiasbynens.be/notes/javascript-encoding>
 * @memberOf punycode.ucs2
 * @name decode
 * @param {String} string The Unicode input string (UCS-2).
 * @returns {Array} The new array of code points.
 */function ucs2decode(string){cov_2lb1jwotzl.f[3]++;const output=(cov_2lb1jwotzl.s[31]++,[]);let counter=(cov_2lb1jwotzl.s[32]++,0);const length=(cov_2lb1jwotzl.s[33]++,string.length);cov_2lb1jwotzl.s[34]++;while(counter<length){const value=(cov_2lb1jwotzl.s[35]++,string.charCodeAt(counter++));cov_2lb1jwotzl.s[36]++;if((cov_2lb1jwotzl.b[2][0]++,value>=0xD800)&&(cov_2lb1jwotzl.b[2][1]++,value<=0xDBFF)&&(cov_2lb1jwotzl.b[2][2]++,counter<length)){cov_2lb1jwotzl.b[1][0]++;// It's a high surrogate, and there is a next character.
const extra=(cov_2lb1jwotzl.s[37]++,string.charCodeAt(counter++));cov_2lb1jwotzl.s[38]++;if((extra&0xFC00)==0xDC00){cov_2lb1jwotzl.b[3][0]++;cov_2lb1jwotzl.s[39]++;// Low surrogate.
output.push(((value&0x3FF)<<10)+(extra&0x3FF)+0x10000);}else{cov_2lb1jwotzl.b[3][1]++;cov_2lb1jwotzl.s[40]++;// It's an unmatched surrogate; only append this code unit, in case the
// next code unit is the high surrogate of a surrogate pair.
output.push(value);cov_2lb1jwotzl.s[41]++;counter--;}}else{cov_2lb1jwotzl.b[1][1]++;cov_2lb1jwotzl.s[42]++;output.push(value);}}cov_2lb1jwotzl.s[43]++;return output;}/**
 * Creates a string based on an array of numeric code points.
 * @see `punycode.ucs2.decode`
 * @memberOf punycode.ucs2
 * @name encode
 * @param {Array} codePoints The array of numeric code points.
 * @returns {String} The new Unicode string (UCS-2).
 */cov_2lb1jwotzl.s[44]++;const ucs2encode=array=>{cov_2lb1jwotzl.f[4]++;cov_2lb1jwotzl.s[45]++;return String.fromCodePoint(...array);};/**
 * Converts a basic code point into a digit/integer.
 * @see `digitToBasic()`
 * @private
 * @param {Number} codePoint The basic numeric code point value.
 * @returns {Number} The numeric value of a basic code point (for use in
 * representing integers) in the range `0` to `base - 1`, or `base` if
 * the code point does not represent a value.
 */cov_2lb1jwotzl.s[46]++;const basicToDigit=function(codePoint){cov_2lb1jwotzl.f[5]++;cov_2lb1jwotzl.s[47]++;if(codePoint-0x30<0x0A){cov_2lb1jwotzl.b[4][0]++;cov_2lb1jwotzl.s[48]++;return codePoint-0x16;}else{cov_2lb1jwotzl.b[4][1]++;}cov_2lb1jwotzl.s[49]++;if(codePoint-0x41<0x1A){cov_2lb1jwotzl.b[5][0]++;cov_2lb1jwotzl.s[50]++;return codePoint-0x41;}else{cov_2lb1jwotzl.b[5][1]++;}cov_2lb1jwotzl.s[51]++;if(codePoint-0x61<0x1A){cov_2lb1jwotzl.b[6][0]++;cov_2lb1jwotzl.s[52]++;return codePoint-0x61;}else{cov_2lb1jwotzl.b[6][1]++;}cov_2lb1jwotzl.s[53]++;return base;};/**
 * Converts a digit/integer into a basic code point.
 * @see `basicToDigit()`
 * @private
 * @param {Number} digit The numeric value of a basic code point.
 * @returns {Number} The basic code point whose value (when used for
 * representing integers) is `digit`, which needs to be in the range
 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
 * used; else, the lowercase form is used. The behavior is undefined
 * if `flag` is non-zero and `digit` has no uppercase form.
 */cov_2lb1jwotzl.s[54]++;const digitToBasic=function(digit,flag){cov_2lb1jwotzl.f[6]++;cov_2lb1jwotzl.s[55]++;//  0..25 map to ASCII a..z or A..Z
// 26..35 map to ASCII 0..9
return digit+22+75*(digit<26)-((flag!=0)<<5);};/**
 * Bias adaptation function as per section 3.4 of RFC 3492.
 * https://tools.ietf.org/html/rfc3492#section-3.4
 * @private
 */cov_2lb1jwotzl.s[56]++;const adapt=function(delta,numPoints,firstTime){cov_2lb1jwotzl.f[7]++;let k=(cov_2lb1jwotzl.s[57]++,0);cov_2lb1jwotzl.s[58]++;delta=firstTime?(cov_2lb1jwotzl.b[7][0]++,floor(delta/damp)):(cov_2lb1jwotzl.b[7][1]++,delta>>1);cov_2lb1jwotzl.s[59]++;delta+=floor(delta/numPoints);cov_2lb1jwotzl.s[60]++;for(;/* no initialization */delta>baseMinusTMin*tMax>>1;k+=base){cov_2lb1jwotzl.s[61]++;delta=floor(delta/baseMinusTMin);}cov_2lb1jwotzl.s[62]++;return floor(k+(baseMinusTMin+1)*delta/(delta+skew));};/**
 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
 * symbols.
 * @memberOf punycode
 * @param {String} input The Punycode string of ASCII-only symbols.
 * @returns {String} The resulting string of Unicode symbols.
 */cov_2lb1jwotzl.s[63]++;const decode=function(input){cov_2lb1jwotzl.f[8]++;// Don't use UCS-2.
const output=(cov_2lb1jwotzl.s[64]++,[]);const inputLength=(cov_2lb1jwotzl.s[65]++,input.length);let i=(cov_2lb1jwotzl.s[66]++,0);let n=(cov_2lb1jwotzl.s[67]++,initialN);let bias=(cov_2lb1jwotzl.s[68]++,initialBias);// Handle the basic code points: let `basic` be the number of input code
// points before the last delimiter, or `0` if there is none, then copy
// the first basic code points to the output.
let basic=(cov_2lb1jwotzl.s[69]++,input.lastIndexOf(delimiter));cov_2lb1jwotzl.s[70]++;if(basic<0){cov_2lb1jwotzl.b[8][0]++;cov_2lb1jwotzl.s[71]++;basic=0;}else{cov_2lb1jwotzl.b[8][1]++;}cov_2lb1jwotzl.s[72]++;for(var j=0;j<basic;++j){cov_2lb1jwotzl.s[73]++;// if it's not a basic code point
if(input.charCodeAt(j)>=0x80){cov_2lb1jwotzl.b[9][0]++;cov_2lb1jwotzl.s[74]++;error('not-basic');}else{cov_2lb1jwotzl.b[9][1]++;}cov_2lb1jwotzl.s[75]++;output.push(input.charCodeAt(j));}// Main decoding loop: start just after the last delimiter if any basic code
// points were copied; start at the beginning otherwise.
cov_2lb1jwotzl.s[76]++;for(var index=basic>0?basic+1:0;index<inputLength;)/* no final expression */{// `index` is the index of the next character to be consumed.
// Decode a generalized variable-length integer into `delta`,
// which gets added to `i`. The overflow checking is easier
// if we increase `i` as we go, then subtract off its starting
// value at the end to obtain `delta`.
let oldi=(cov_2lb1jwotzl.s[77]++,i);cov_2lb1jwotzl.s[78]++;for(var w=1,k=base;;/* no condition */k+=base){cov_2lb1jwotzl.s[79]++;if(index>=inputLength){cov_2lb1jwotzl.b[10][0]++;cov_2lb1jwotzl.s[80]++;error('invalid-input');}else{cov_2lb1jwotzl.b[10][1]++;}const digit=(cov_2lb1jwotzl.s[81]++,basicToDigit(input.charCodeAt(index++)));cov_2lb1jwotzl.s[82]++;if((cov_2lb1jwotzl.b[12][0]++,digit>=base)||(cov_2lb1jwotzl.b[12][1]++,digit>floor((maxInt-i)/w))){cov_2lb1jwotzl.b[11][0]++;cov_2lb1jwotzl.s[83]++;error('overflow');}else{cov_2lb1jwotzl.b[11][1]++;}cov_2lb1jwotzl.s[84]++;i+=digit*w;const t=(cov_2lb1jwotzl.s[85]++,k<=bias?(cov_2lb1jwotzl.b[13][0]++,tMin):(cov_2lb1jwotzl.b[13][1]++,k>=bias+tMax?(cov_2lb1jwotzl.b[14][0]++,tMax):(cov_2lb1jwotzl.b[14][1]++,k-bias)));cov_2lb1jwotzl.s[86]++;if(digit<t){cov_2lb1jwotzl.b[15][0]++;cov_2lb1jwotzl.s[87]++;break;}else{cov_2lb1jwotzl.b[15][1]++;}const baseMinusT=(cov_2lb1jwotzl.s[88]++,base-t);cov_2lb1jwotzl.s[89]++;if(w>floor(maxInt/baseMinusT)){cov_2lb1jwotzl.b[16][0]++;cov_2lb1jwotzl.s[90]++;error('overflow');}else{cov_2lb1jwotzl.b[16][1]++;}cov_2lb1jwotzl.s[91]++;w*=baseMinusT;}const out=(cov_2lb1jwotzl.s[92]++,output.length+1);cov_2lb1jwotzl.s[93]++;bias=adapt(i-oldi,out,oldi==0);// `i` was supposed to wrap around from `out` to `0`,
// incrementing `n` each time, so we'll fix that now:
cov_2lb1jwotzl.s[94]++;if(floor(i/out)>maxInt-n){cov_2lb1jwotzl.b[17][0]++;cov_2lb1jwotzl.s[95]++;error('overflow');}else{cov_2lb1jwotzl.b[17][1]++;}cov_2lb1jwotzl.s[96]++;n+=floor(i/out);cov_2lb1jwotzl.s[97]++;i%=out;// Insert `n` at position `i` of the output.
cov_2lb1jwotzl.s[98]++;output.splice(i++,0,n);}cov_2lb1jwotzl.s[99]++;return String.fromCodePoint(...output);};/**
 * Converts a string of Unicode symbols (e.g. a domain name label) to a
 * Punycode string of ASCII-only symbols.
 * @memberOf punycode
 * @param {String} input The string of Unicode symbols.
 * @returns {String} The resulting Punycode string of ASCII-only symbols.
 */cov_2lb1jwotzl.s[100]++;const encode=function(input){cov_2lb1jwotzl.f[9]++;const output=(cov_2lb1jwotzl.s[101]++,[]);// Convert the input in UCS-2 to an array of Unicode code points.
cov_2lb1jwotzl.s[102]++;input=ucs2decode(input);// Cache the length.
let inputLength=(cov_2lb1jwotzl.s[103]++,input.length);// Initialize the state.
let n=(cov_2lb1jwotzl.s[104]++,initialN);let delta=(cov_2lb1jwotzl.s[105]++,0);let bias=(cov_2lb1jwotzl.s[106]++,initialBias);// Handle the basic code points.
cov_2lb1jwotzl.s[107]++;for(const currentValue of input){cov_2lb1jwotzl.s[108]++;if(currentValue<0x80){cov_2lb1jwotzl.b[18][0]++;cov_2lb1jwotzl.s[109]++;output.push(stringFromCharCode(currentValue));}else{cov_2lb1jwotzl.b[18][1]++;}}let basicLength=(cov_2lb1jwotzl.s[110]++,output.length);let handledCPCount=(cov_2lb1jwotzl.s[111]++,basicLength);// `handledCPCount` is the number of code points that have been handled;
// `basicLength` is the number of basic code points.
// Finish the basic string with a delimiter unless it's empty.
cov_2lb1jwotzl.s[112]++;if(basicLength){cov_2lb1jwotzl.b[19][0]++;cov_2lb1jwotzl.s[113]++;output.push(delimiter);}else{cov_2lb1jwotzl.b[19][1]++;}// Main encoding loop:
cov_2lb1jwotzl.s[114]++;while(handledCPCount<inputLength){// All non-basic code points < n have been handled already. Find the next
// larger one:
let m=(cov_2lb1jwotzl.s[115]++,maxInt);cov_2lb1jwotzl.s[116]++;for(const currentValue of input){cov_2lb1jwotzl.s[117]++;if((cov_2lb1jwotzl.b[21][0]++,currentValue>=n)&&(cov_2lb1jwotzl.b[21][1]++,currentValue<m)){cov_2lb1jwotzl.b[20][0]++;cov_2lb1jwotzl.s[118]++;m=currentValue;}else{cov_2lb1jwotzl.b[20][1]++;}}// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
// but guard against overflow.
const handledCPCountPlusOne=(cov_2lb1jwotzl.s[119]++,handledCPCount+1);cov_2lb1jwotzl.s[120]++;if(m-n>floor((maxInt-delta)/handledCPCountPlusOne)){cov_2lb1jwotzl.b[22][0]++;cov_2lb1jwotzl.s[121]++;error('overflow');}else{cov_2lb1jwotzl.b[22][1]++;}cov_2lb1jwotzl.s[122]++;delta+=(m-n)*handledCPCountPlusOne;cov_2lb1jwotzl.s[123]++;n=m;cov_2lb1jwotzl.s[124]++;for(const currentValue of input){cov_2lb1jwotzl.s[125]++;if((cov_2lb1jwotzl.b[24][0]++,currentValue<n)&&(cov_2lb1jwotzl.b[24][1]++,++delta>maxInt)){cov_2lb1jwotzl.b[23][0]++;cov_2lb1jwotzl.s[126]++;error('overflow');}else{cov_2lb1jwotzl.b[23][1]++;}cov_2lb1jwotzl.s[127]++;if(currentValue==n){cov_2lb1jwotzl.b[25][0]++;// Represent delta as a generalized variable-length integer.
let q=(cov_2lb1jwotzl.s[128]++,delta);cov_2lb1jwotzl.s[129]++;for(var k=base;;/* no condition */k+=base){const t=(cov_2lb1jwotzl.s[130]++,k<=bias?(cov_2lb1jwotzl.b[26][0]++,tMin):(cov_2lb1jwotzl.b[26][1]++,k>=bias+tMax?(cov_2lb1jwotzl.b[27][0]++,tMax):(cov_2lb1jwotzl.b[27][1]++,k-bias)));cov_2lb1jwotzl.s[131]++;if(q<t){cov_2lb1jwotzl.b[28][0]++;cov_2lb1jwotzl.s[132]++;break;}else{cov_2lb1jwotzl.b[28][1]++;}const qMinusT=(cov_2lb1jwotzl.s[133]++,q-t);const baseMinusT=(cov_2lb1jwotzl.s[134]++,base-t);cov_2lb1jwotzl.s[135]++;output.push(stringFromCharCode(digitToBasic(t+qMinusT%baseMinusT,0)));cov_2lb1jwotzl.s[136]++;q=floor(qMinusT/baseMinusT);}cov_2lb1jwotzl.s[137]++;output.push(stringFromCharCode(digitToBasic(q,0)));cov_2lb1jwotzl.s[138]++;bias=adapt(delta,handledCPCountPlusOne,handledCPCount==basicLength);cov_2lb1jwotzl.s[139]++;delta=0;cov_2lb1jwotzl.s[140]++;++handledCPCount;}else{cov_2lb1jwotzl.b[25][1]++;}}cov_2lb1jwotzl.s[141]++;++delta;cov_2lb1jwotzl.s[142]++;++n;}cov_2lb1jwotzl.s[143]++;return output.join('');};/**
 * Converts a Punycode string representing a domain name or an email address
 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
 * it doesn't matter if you call it on a string that has already been
 * converted to Unicode.
 * @memberOf punycode
 * @param {String} input The Punycoded domain name or email address to
 * convert to Unicode.
 * @returns {String} The Unicode representation of the given Punycode
 * string.
 */cov_2lb1jwotzl.s[144]++;const toUnicode=function(input){cov_2lb1jwotzl.f[10]++;cov_2lb1jwotzl.s[145]++;return mapDomain(input,function(string){cov_2lb1jwotzl.f[11]++;cov_2lb1jwotzl.s[146]++;return regexPunycode.test(string)?(cov_2lb1jwotzl.b[29][0]++,decode(string.slice(4).toLowerCase())):(cov_2lb1jwotzl.b[29][1]++,string);});};/**
 * Converts a Unicode string representing a domain name or an email address to
 * Punycode. Only the non-ASCII parts of the domain name will be converted,
 * i.e. it doesn't matter if you call it with a domain that's already in
 * ASCII.
 * @memberOf punycode
 * @param {String} input The domain name or email address to convert, as a
 * Unicode string.
 * @returns {String} The Punycode representation of the given domain name or
 * email address.
 */cov_2lb1jwotzl.s[147]++;const toASCII=function(input){cov_2lb1jwotzl.f[12]++;cov_2lb1jwotzl.s[148]++;return mapDomain(input,function(string){cov_2lb1jwotzl.f[13]++;cov_2lb1jwotzl.s[149]++;return regexNonASCII.test(string)?(cov_2lb1jwotzl.b[30][0]++,'xn--'+encode(string)):(cov_2lb1jwotzl.b[30][1]++,string);});};/*--------------------------------------------------------------------------*//** Define the public API */const punycode=(cov_2lb1jwotzl.s[150]++,{/**
	 * A string representing the current Punycode.js version number.
	 * @memberOf punycode
	 * @type String
	 */'version':'2.0.0',/**
	 * An object of methods to convert from JavaScript's internal character
	 * representation (UCS-2) to Unicode code points, and back.
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode
	 * @type Object
	 */'ucs2':{'decode':ucs2decode,'encode':ucs2encode},'decode':decode,'encode':encode,'toASCII':toASCII,'toUnicode':toUnicode});cov_2lb1jwotzl.s[151]++;module.exports=punycode;