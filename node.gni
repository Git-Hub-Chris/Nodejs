 # This file is used by GN for building, which is NOT the build system used for
# building official binaries.
# Please refer to `node.gyp` if you are making changes to the build system.

# Embedder options.
declare_args() {
  # Paths for Node.js and dependencies in the source code tree.
  node_path = "//node"
  node_v8_path = "$node_path/deps/v8"                # Path to V8
  node_openssl_path = "$node_path/deps/openssl"      # Path to OpenSSL
  node_simdutf_path = "$node_path/deps/simdutf"      # Path to SIMDUTF

  # The NODE_MODULE_VERSION defined in node_version.h.
  node_module_version = exec_script("$node_path/tools/getmoduleversion.py", [], "value")

  # External shareable built-ins.
  # These are currently duplicated from `configure.py`. Sharing configurations between
  # GN and GYP would enhance consistency and reduce maintenance overhead.
  node_builtin_shareable_builtins = [
    "deps/cjs-module-lexer/lexer.js",
    "deps/cjs-module-lexer/dist/lexer.js",
    "deps/undici/undici.js",
    "deps/amaro/dist/index.js",
  ]
}

# Configuration options similar to those in GYP files.
declare_args() {
  # Enable V8 inspector protocol.
  node_enable_inspector = true

  # Build Node.js with SSL support.
  # Named "openssl" for parity with the GYP build system.
  node_use_openssl = true

  # Custom system CA (PEM format) path, in addition to BoringSSL or Mozilla CA.
  node_openssl_system_ca_path = ""

  # Initialize the V8 platform during Node.js startup.
  node_use_v8_platform = true

  # Custom build tag.
  node_tag = ""

  # V8 options to pass, see `node --v8-options` for examples.
  node_v8_options = ""

  # Custom URL prefix for `process.release` properties (`sourceUrl`, `headersUrl`).
  # Defaults to `https://nodejs.org/download/release/` in release builds.
  node_release_urlbase = ""

  # Use code cache to speed up startup, disabled for cross-compilation.
  node_use_node_code_cache = (host_os == target_os) && (host_cpu == target_cpu)

  # Use snapshot to speed up startup.
  # Known limitations:
  # 1. Cross-OS compilation is not supported.
  # 2. Crashes occur when cross-compiling for x64 from arm64.
  node_use_node_snapshot = (host_os == target_os) && !(host_cpu == "arm64" && target_cpu == "x64")

  # Build with Amaro (TypeScript utilities).
  node_use_amaro = true
}

# Ensure V8 inspector is only enabled when SSL support is available.
assert(
  !node_enable_inspector || node_use_openssl,
  "node_enable_inspector requires node_use_openssl"
)

